{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR/cli'\n{ rpr\n  echo }                  = GUY.trm\n#...........................................................................................................\nPATH                      = require 'node:path'\nFS                        = require 'fs-extra'\nCP                        = require 'node:child_process'\nH                         = require './helpers'\ntypes                     = require './types'\n{ isa\n  validate }              = types\nMIXA                      = require 'mixa'\nGUY                       = require 'guy'\n{ lime\n  blue\n  grey }                  = GUY.trm\n{ Metteur }               = require './main'\n{ to_width }              = require 'to-width'\ndeep_copy                 = ( require 'rfdc' ) { proto: true, circles: false, }\n$$                        = ( P... ) -> ( await $ P... ).stdout.trim()\n\n#-----------------------------------------------------------------------------------------------------------\nresolve = ( P... ) ->\n  return PATH.resolve PATH.join P... if P[ 0 ].startsWith '/'\n  return PATH.resolve PATH.join process.env.cwd, P...\n\n#-----------------------------------------------------------------------------------------------------------\nrun_tex_etc = ( cfg ) ->\n  cfg.tex_target_path   = resolve cfg.tex_working_path, 'booklet.tex'\n  cfg.tex_pdf_path      = resolve cfg.tex_working_path, 'booklet.pdf'\n  FS.writeFileSync cfg.tex_target_path, cfg.imposition\n  whisper \"wrote imposition to #{cfg.tex_target_path}\"\n  await _run_tex cfg\n  if FS.pathExistsSync cfg.tex_pdf_path\n    FS.moveSync cfg.tex_pdf_path, cfg.output, { overwrite: cfg.overwrite, }\n    help \"wrote output to #{cfg.output}\"\n  else\n    warn GUY.trm.reverse \" ^metteur/cli@34^ no output produced \"\n    process.exit 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_hash          = -> ( require 'crypto' ).createHash 'sha1'\ndigest_from_path  = ( path ) -> ( new_hash().update FS.readFileSync path ).digest 'hex'\n\n#-----------------------------------------------------------------------------------------------------------\npath_from_executable_name = ( name ) ->\n  await import( 'zx/globals' )\n  try return await $$\"\"\"command -v #{name}\"\"\" catch error\n    warn \"^6456^\", \"\"\"\n      unable to locate #{name};\n      please refer to [section *External Dependencies*](https://github.com/loveencounterflow/metteur#external-dependencies) in the README.md\"\"\"\n    throw error\n\n#-----------------------------------------------------------------------------------------------------------\n_run_tex = ( cfg ) ->\n  paths =\n    xelatex: await path_from_executable_name 'xelatex'\n  #---------------------------------------------------------------------------------------------------------\n  cd cfg.tex_working_path\n  ### TAINT use loop, check *.aux for changes ###\n  log_path    = PATH.join cfg.tex_working_path, 'xelatex-output'\n  aux_path    = PATH.join cfg.tex_working_path, 'booklet.aux'\n  ### TAINT this method has the drawback that we always run at least twice ###\n  new_digest  = null\n  old_digest  = null\n  loop\n    try\n      await $\"\"\"time #{paths.xelatex} --halt-on-error booklet.tex > xelatex-output\"\"\"\n    catch error\n      echo FS.readFileSync log_path, { encoding: 'utf-8', }\n      warn error.exitCode\n      throw error\n    break if ( new_digest = digest_from_path aux_path ) is old_digest\n    old_digest = new_digest\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_cfg = ( cfg ) ->\n  whisper()\n  # whisper \"#{to_width \"#{key}:\", 20} #{value}\" for key, value of cfg\n  console.table ( { key, value, } for key, value of cfg )\n  whisper()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_pdf_info = ( cfg ) ->\n  await import( 'zx/globals' )\n  verbose       = $.verbose; $.verbose = false\n  pdfinfo_path  = await path_from_executable_name 'pdfinfo'\n  stdout        = ( await $\"#{pdfinfo_path} #{cfg.input}\" ).stdout.trim()\n  R             = {}\n  #.........................................................................................................\n  for line in stdout.split /\\n/\n    continue unless ( match = line.match /^(?<key>[^:]+):\\s*(?<value>.*)$/ )?\n    key   = match.groups.key.toLowerCase()\n    value = match.groups.value\n    switch key\n      when 'pages'\n        R.pagecount = parseInt value, 10\n      when 'page size'\n        unless ( submatch = value.match /(?<page_width>[\\d.]+)\\s*x\\s*(?<page_height>[\\d.]+)\\s*pts/ )?\n          warn \"^33847^ unable to parse #{rpr line}\"\n          R.page_width  = 210\n          R.page_height = 297\n          continue\n        R.page_width  = H.mm_from_pt parseFloat submatch.groups.page_width\n        R.page_height = H.mm_from_pt parseFloat submatch.groups.page_height\n      else\n        null\n  #.........................................................................................................\n  $.verbose = verbose\n  info '^690-1^', \"PDF: #{rpr R}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_pagedistro = ( cfg ) ->\n  Object.assign cfg, await fetch_pdf_info cfg\n  cfg.sheetcount      = cfg.pagecount // cfg.layout.pps\n  remainder           = cfg.pagecount %% cfg.layout.pps\n  cfg.sheetcount++ if remainder isnt 0\n  cfg.blank_pagecount = cfg.layout.pps - remainder\n  R                   = [ 1 .. cfg.pagecount ]\n  return R if cfg.blank_pagecount is 0\n  split               = deep_copy cfg.mtr_split\n  #.........................................................................................................\n  ### turn RPNRs into LPNRs ###\n  ### TAINT correct or complain about PNRs outside the allowed range ###\n  for d in split\n    if isa.negative d.pnr\n      d.pnr = cfg.pagecount + d.pnr\n  #.........................................................................................................\n  inserts = {}\n  bpc     = cfg.blank_pagecount\n  loop\n    break if bpc < 0\n    for d in split\n      continue if d.count <= 0\n      bpc--\n      break if bpc < 0\n      d.count--\n      inserts[ d.pnr ] = ( inserts[ d.pnr ] ?= 0 ) + 1\n  #.........................................................................................................\n  R = ( [ pnr, ] for pnr in R )\n  for pnr_txt, count of inserts\n    pnr = parseInt pnr_txt, 10\n    idx = pnr - 1\n    # ### thx to https://2ality.com/2018/12/creating-arrays.html#creating-ranges-of-integer-values ###\n    # R[ idx ].push Array.from { length, }, ( _, i ) -> -1\n    R[ idx ].push -1 for _ in [ 1 .. count ]\n  R = R.flat()\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  #.........................................................................................................\n  jobdefs =\n    # meta:\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'help':\n        runner: ( d ) =>\n          debug '^690-1^', process.argv\n          echo lime \"\"\"Metteur: produce impositions for booklets with 4, 8 or 16 pages arranged on one sheet\"\"\"\n          echo blue \"\"\"\n            Usage:\n              metteur impose [flags]\n                --input       -i\n                --overwrite   -y\n                --output      -o\n                --split\n            \"\"\"\n      #-----------------------------------------------------------------------------------------------------\n      'impose':\n        description:  \"assemble pages from one PDF file into a new PDF, to be folded into a booklet\"\n        runner: ( d ) =>\n          cfg             = types.create.mtr_impose_cfg d.verdict.parameters\n          # await GUY.temp.with_directory { keep: true, }, ({ path }) ->\n          do ( path = '/tmp/guy.temp--12229-ZUjUOVQEIZXI' ) ->\n            cfg.tex_working_path  = path\n            cfg.mtr_split         = types.data.mtr_split\n            cfg.input             = resolve cfg.input\n            cfg.output            = resolve cfg.output\n            cfg.pagedistro        = await fetch_pagedistro cfg\n            cfg.sig_pdf_path      = resolve cfg.tex_working_path, 'signatures.pdf'\n            debug '^3553^', { pagedistro: cfg.pagedistro, }\n            show_cfg cfg\n            mtr                   = new Metteur()\n            cfg.imposition        = await mtr._impose cfg\n            # process.exit 111\n            await run_tex_etc cfg\n            return null\n          return null\n        flags:\n          'layout':\n            alias:        'l'\n            type:         String\n            description:  \"name of a layout; defaults to 'pps16'\"\n          'input':\n            alias:        'i'\n            type:         String\n            # positional:   true\n            # multiple:     'greedy'\n            description:  \"input file (providing the individual pages)\"\n          'output':\n            alias:        'o'\n            type:         String\n            # positional:   true\n            description:  \"output file (containing the booklet with multiple pages per sheet, front and back)\"\n          'overwrite':\n            alias:        'y'\n            type:         Boolean\n            # positional:   true\n            description:  \"whether to overwrite output file\"\n          'split':\n            # alias:        'y'\n            type:         String\n            # positional:   true\n            description:  \"use positive page nr or negative count to control insertion of empty pages\"\n      #-----------------------------------------------------------------------------------------------------\n      # 'tex':\n      #   description:  \"run XeLaTeX on tex/booklet.tex to produce tex/booklet.pdf\"\n        # runner: run_tex\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await @cli()\n\n"
  ]
}