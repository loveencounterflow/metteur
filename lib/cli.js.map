{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR/cli'\n{ rpr\n  echo }                  = GUY.trm\n#...........................................................................................................\nPATH                      = require 'node:path'\nFS                        = require 'fs-extra'\nCP                        = require 'node:child_process'\ntypes                     = require './types'\n{ isa\n  validate }              = types\nMIXA                      = require 'mixa'\nGUY                       = require 'guy'\n{ lime\n  blue\n  grey }                  = GUY.trm\n{ Metteur }               = require './main'\n{ to_width }              = require 'to-width'\n$$                        = ( P... ) -> ( await $ P... ).stdout.trim()\n\n#-----------------------------------------------------------------------------------------------------------\nresolve = ( P... ) ->\n  return PATH.resolve PATH.join P... if P[ 0 ].startsWith '/'\n  return PATH.resolve PATH.join process.env.cwd, P...\n\n#-----------------------------------------------------------------------------------------------------------\nrun_tex_etc = ( cfg ) ->\n  await GUY.temp.with_directory { keep: false, }, ({ path }) ->\n    cfg.tex_working_path  = path\n    cfg.tex_target_path   = resolve cfg.tex_working_path, 'booklet.tex'\n    cfg.tex_pdf_path      = resolve cfg.tex_working_path, 'booklet.pdf'\n    FS.writeFileSync cfg.tex_target_path, cfg.imposition\n    whisper \"wrote imposition to #{cfg.tex_target_path}\"\n    await _run_tex cfg\n    FS.moveSync cfg.tex_pdf_path, cfg.output, { overwrite: cfg.overwrite, }\n    help \"wrote output to #{cfg.output}\"\n    return null\n  return cfg\n\n#-----------------------------------------------------------------------------------------------------------\npath_from_executable_name = ( name ) ->\n  await import( 'zx/globals' )\n  try return await $$\"\"\"command -v #{name}\"\"\" catch error\n    warn \"^6456^\", \"\"\"\n      unable to locate #{name};\n      please refer to [section *External Dependencies*](https://github.com/loveencounterflow/metteur#external-dependencies) in the README.md\"\"\"\n    throw error\n\n#-----------------------------------------------------------------------------------------------------------\n_run_tex = ( cfg ) ->\n  paths =\n    xelatex: await path_from_executable_name 'xelatex'\n  #---------------------------------------------------------------------------------------------------------\n  cd cfg.tex_working_path\n  await $\"\"\"time #{paths.xelatex} --halt-on-error booklet.tex > xelatex-output\"\"\"\n  await $\"\"\"time #{paths.xelatex} --halt-on-error booklet.tex > xelatex-output\"\"\"\n  # debug '^43345^', cfg\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_cfg = ( cfg ) ->\n  whisper()\n  # whisper \"#{to_width \"#{key}:\", 20} #{value}\" for key, value of cfg\n  console.table ( { key, value, } for key, value of cfg )\n  whisper()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_pagecount = ( cfg ) ->\n  await import( 'zx/globals' )\n  verbose       = $.verbose; $.verbose = false\n  pdfinfo_path  = await path_from_executable_name 'pdfinfo'\n  R             = ( await $\"#{pdfinfo_path} #{cfg.input} | grep -Pi '^Pages:'\" ).stdout.trim()\n  R             = R.replace /^.*\\s+(\\d+)$/, \"$1\"\n  R             = parseInt R, 10\n  $.verbose     = verbose\n  info '^690-1^', \"PDF #{cfg.input} has #{R} pages\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_pagedistro = ( cfg ) ->\n  cfg.pagecount       = await fetch_pagecount cfg\n  unless -cfg.pagecount <= cfg.split <= +cfg.pagecount\n    throw new Error \"^metteur/cli@33^ value for `split` (#{cfg.split}) exceeds pagecount (#{cfg.pagecount})\"\n  cfg.split_abs       = cfg.pagecount + cfg.split + 1 if cfg.split < 0\n  cfg.blank_pagecount = cfg.pps %% cfg.pagecount\n  if cfg.blank_pagecount is 0\n    ### NOTE lpnr: Left-anchored Page NumbeR;\n      rpnr would be negative and count from right end, sp -1 is last page ###\n    return ( lpnr for lpnr in [ 1 .. cfg.pagecount ] )\n  ### TAINT only valid for single signature ###\n  cfg.pagedistro = [  ( lpnr for lpnr in [ 1              ... cfg.split_abs ]       )..., \\\n                      ( 0    for lpnr in [ 1              ..  cfg.blank_pagecount ] )..., \\\n                      ( lpnr for lpnr in [ cfg.split_abs  ..  cfg.pagecount ]       )..., ]\n  debug '^3253^', cfg.blank_pagecount\n  debug '^3253^', cfg.pagedistro\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  #.........................................................................................................\n  jobdefs =\n    # meta:\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'help':\n        runner: ( d ) =>\n          debug '^690-1^', process.argv\n          echo lime \"\"\"Metteur: produce impositions for booklets with 4, 8 or 16 pages arranged on one sheet\"\"\"\n          echo blue \"\"\"\n            Usage:\n              metteur impose [flags]\n                --input       -i\n                --overwrite   -y\n                --output      -o\n                --split\n            \"\"\"\n      #-----------------------------------------------------------------------------------------------------\n      'impose':\n        description:  \"assemble pages from one PDF file into a new PDF, to be folded into a booklet\"\n        runner: ( d ) =>\n          # cfg             = types.create.mtr_cli_impose_cfg d.verdict.parameters\n          cfg             = types.create.mtr_impose_cfg d.verdict.parameters\n          cfg.input       = resolve cfg.input\n          cfg.output      = resolve cfg.output\n          ### TAINT compute from layout, user cfg ###\n          cfg.pps         = 16 ### pages per sheet ###\n          cfg.pagedistro  = await fetch_pagedistro cfg\n          debug '^3553^', { pagedistro: cfg.pagedistro, }\n          show_cfg cfg\n          mtr             = new Metteur()\n          cfg.imposition  = mtr.impose cfg\n          await run_tex_etc cfg\n          return null\n        flags:\n          'input':\n            alias:        'i'\n            type:         String\n            # positional:   true\n            # multiple:     'greedy'\n            description:  \"input file (providing the individual pages)\"\n          'output':\n            alias:        'o'\n            type:         String\n            # positional:   true\n            description:  \"output file (containing the booklet with multiple pages per sheet, front and back)\"\n          'overwrite':\n            alias:        'y'\n            type:         Boolean\n            # positional:   true\n            description:  \"whether to overwrite output file\"\n          'split':\n            # alias:        'y'\n            type:         Number\n            # positional:   true\n            description:  \"use positive page nr or negative count to control insertion of empty pages\"\n      #-----------------------------------------------------------------------------------------------------\n      # 'tex':\n      #   description:  \"run XeLaTeX on tex/booklet.tex to produce tex/booklet.pdf\"\n        # runner: run_tex\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await @cli()\n\n"
  ]
}