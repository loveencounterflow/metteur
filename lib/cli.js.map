{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR'\n{ rpr\n  echo }                  = GUY.trm\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = require './types'\n{ isa\n  validate }              = types\nMIXA                      = require 'mixa'\n# { spawn }                 = require 'child_process'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'sql_insert_target_encoding', ( x ) -> x in [ 'binary', 'text', ]\n\n#-----------------------------------------------------------------------------------------------------------\n$echo_channels = ->\n  return $watch ( d ) =>\n    switch d.$key\n      when '^stdout' then echo CND.yellow d.$value\n      when '^stderr' then echo CND.red d.$value\n      else debug d #.$value\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$process_nmap_output = ->\n  blank_re              = /^\\s*$/\n  first_re              = /^Nmap scan report for (?<name>.*)\\s+\\((?<ip>[0-9a-f.]+)\\)/\n  first_noname_re       = /^Nmap scan report for (?<ip>[0-9a-f.]+)$/\n  latency_re            = /^Host is up \\((?<latency>\\S+) latency\\)\\.$/\n  mac_re                = /^MAC Address: (?<mac>[0-9A-F:]+) \\((?<info>.*)\\)$/\n  entry                 = null\n  return $ ( d, send ) ->\n    return send d if d.$key in [ '<cp', '>cp', ]\n    if d.$key isnt '^stdout'\n      echo CND.red d.$value ? d\n      return\n    #.......................................................................................................\n    line = d.$value\n    return if ( line.match blank_re )?\n    return if line.startsWith 'Starting Nmap '\n    if line.startsWith 'Nmap done: '\n      send freeze entry if entry?\n      entry = null\n    else if ( match = line.match first_re )?\n      send freeze entry if entry?\n      entry = { match.groups..., }\n    else if ( match = line.match first_noname_re )?\n      send freeze entry if entry?\n      entry = { match.groups..., }\n    else if line is 'Host is up.'\n      entry.status = 'up'\n    else if ( match = line.match latency_re )?\n      entry.latency = match.groups.latency\n      entry.status = 'up'\n    else if ( match = line.match mac_re )?\n      entry.mac   = match.groups.mac\n      entry.info  = match.groups.info if match.groups.info? and ( match.groups.info isnt 'Unknown' )\n    else\n      echo CND.red '???', rpr line\n    # echo CND.grey d\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_hosts = -> new Promise ( resolve, reject ) =>\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $process_nmap_output()\n  pipeline.push $watch ( d ) ->\n    return if d.$key in [ '<cp', '>cp', ]\n    # echo CND.steel d\n    echo CND.yellow ( d.ip ? '?' ), ( d.name ? '?' ), ( '(' + ( d.info ? '?' ) + ')' )\n  # pipeline.push $show()\n  pipeline.push $drain -> resolve()\n  SP.pull pipeline...\n  cp = spawn 'sudo', [ 'nmap', '-sn', '192.168.190.0/24', ]\n  source.send x for await x from JFEE.Receiver.from_child_process cp\n  source.end()\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  #.........................................................................................................\n  jobdefs =\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'impose':\n        description:  \"assemble pages from one PDF file into a new PDF, to be folded into a booklet\"\n        runner: ( d ) =>\n          debug '^345345^', process.argv\n          debug '^77665^', cfg = types.create.mtr_cli_impose_cfg d.verdict.parameters\n          ( require './main' ).demo()\n          return null\n        flags:\n          'input':\n            alias:        'i'\n            type:         String\n            # positional:   true\n            # multiple:     'greedy'\n            description:  \"input file (providing the individual pages)\"\n          'output':\n            alias:        'o'\n            type:         String\n            # positional:   true\n            description:  \"output file (containing the booklet with multiple pages per sheet, front and back)\"\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await @cli()\n"
  ]
}