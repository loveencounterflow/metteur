{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR'\n{ rpr\n  echo }                  = GUY.trm\n#...........................................................................................................\nPATH                      = require 'node:path'\nFS                        = require 'fs-extra'\nCP                        = require 'node:child_process'\ntypes                     = require './types'\n{ isa\n  validate }              = types\nMIXA                      = require 'mixa'\nGUY                       = require 'guy'\n{ lime\n  blue\n  grey }                  = GUY.trm\n{ Metteur }               = require './main'\n{ to_width }              = require 'to-width'\n\n#-----------------------------------------------------------------------------------------------------------\nresolve = ( P... ) ->\n  return PATH.resolve PATH.join P... if P[ 0 ].startsWith '/'\n  return PATH.resolve PATH.join process.env.cwd, P...\n\n#-----------------------------------------------------------------------------------------------------------\nrun_tex = ( d ) -> new Promise ( resolve, reject ) =>\n  cmd = PATH.resolve PATH.join __dirname, '../bin/run-tex'\n  debug '^3453^', cmd\n  debug '^3453^', \"run #{cmd}\"\n  cp = CP.spawn cmd, []\n  cp.stdout.setEncoding 'utf-8'\n  cp.stderr.setEncoding 'utf-8'\n  cp.stdout.on 'data', ( data ) -> help data\n  cp.stderr.on 'data', ( data ) -> urge data\n  # cp.on 'exit',  ( code, signal ) -> debug '^exit@3534^',  { code, signal, }; resolve()\n  cp.on 'close', ( code, signal ) -> debug '^close@3534^', { code, signal, }; resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nmove_output_to_target = ( d ) ->\n  FS.moveSync\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  #.........................................................................................................\n  jobdefs =\n    # meta:\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'help':\n        runner: ( d ) =>\n          debug '^690-1^', process.argv\n          echo lime \"\"\"Metteur: produce impositions for booklets with 4, 8 or 16 pages arranged on one sheet\"\"\"\n          echo blue \"\"\"\n            Usage:\n              metteur impose [flags]\n                --input   -i\n                --output  -o\n            \"\"\"\n      #-----------------------------------------------------------------------------------------------------\n      'impose':\n        description:  \"assemble pages from one PDF file into a new PDF, to be folded into a booklet\"\n        runner: ( d ) =>\n          cfg         = types.create.mtr_cli_impose_cfg d.verdict.parameters\n          cfg.input   = resolve cfg.input\n          cfg.output  = resolve cfg.output\n          whisper()\n          whisper \"#{to_width \"#{key}:\", 20} #{value}\" for key, value of cfg\n          whisper()\n          mtr = new Metteur()\n          mtr.impose cfg\n          await run_tex()\n          return null\n        flags:\n          'input':\n            alias:        'i'\n            type:         String\n            # positional:   true\n            # multiple:     'greedy'\n            description:  \"input file (providing the individual pages)\"\n          'output':\n            alias:        'o'\n            type:         String\n            # positional:   true\n            description:  \"output file (containing the booklet with multiple pages per sheet, front and back)\"\n      #-----------------------------------------------------------------------------------------------------\n      'tex':\n        description:  \"run XeLaTeX on tex/booklet.tex to produce tex/booklet.pdf\"\n        runner: run_tex\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await @cli()\n"
  ]
}