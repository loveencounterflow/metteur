{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR/types'\n{ rpr\n  echo }                  = GUY.trm\nmodule.exports            = types = new ( require 'intertype' ).Intertype()\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_new_template\n  $template:    'text'\n  $open:        'nonempty.text'\n  $close:       'nonempty.text'\n    ### TAINT would use default `optional.function` but for outstanding bug in `intertype` ###\n  $format:      'function'\n  # extras:       false\n  default:\n    template:     null\n    open:         '{'\n    close:        '}'\n    ### TAINT would use default `null` but for outstanding bug in `intertype` ###\n    # format:       null\n    format:       id = ( value, key ) -> value\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_template_fill\n  isa: ( x ) ->\n    return true\n  default: null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_orientation ( x ) -> x in [ 'ltr', 'rtl', ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_layouts ( x ) ->\n  return false unless @isa.object x\n  for key, value of x\n    return false unless @isa.nonempty.text key\n    return false unless @isa.mtr_layout value\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_layout\n  $name:        'nonempty.text'\n  $recto:       'optional.mtr_sheet_side_layout'\n  $verso:       'optional.mtr_sheet_side_layout'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_sheet_side_layout ( x ) -> true\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_split ( x ) ->\n  return false unless @isa.nonempty.text x\n  parts = ( part.trim() for part in x.split ',' )\n  pnrs  = []\n  for part, idx in parts\n    pair = part.split ':'\n    switch pair.length\n      when 1 then [ pnr, count, ] = [ part, '-1', ]\n      when 2 then [ pnr, count, ] = pair\n      when 3 then return false ### TAINT can we give reason for rejection? ###\n    return false if @isa.nan pnr    = parseInt pnr    ### TAINT use @isa.nan when available ###\n    return false if @isa.nan count  = parseInt count  ### TAINT use @isa.nan when available ###\n    # debug '^45-1^', { pnr, count, }\n    count = +Infinity if count < 0\n    pnrs.push { pnr, count, }\n  @data.mtr_split = pnrs\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare.mtr_impose_cfg\n  $input:       'nonempty.text'\n  $output:      'nonempty.text'\n  $overwrite:   'boolean'\n  $split:       'mtr_split'\n  $orientation: 'mtr_orientation'\n  $layout:      'mtr_layout'\n  $layouts:     'mtr_layouts'\n  default:\n    input:        null\n    output:       null\n    overwrite:    false\n    split:        '-0'\n    orientation:  'ltr' # or 'rtl' which will invert the orientation of all pages, allowing for CJK, Arabic RTL books\n    layout:\n      name:       'pps16'\n    layouts:\n      pps16:\n        name:     'pps16'\n        recto:\n          left:   [  4, 13, 16,  1, ]\n          right:  [  5, 12,  9,  8, ]\n        verso:\n          left:   [  6, 11, 10,  7, ]\n          right:  [  3, 14, 15,  2, ]\n  create: ( cfg ) ->\n    R = { @registry.mtr_impose_cfg.default..., cfg..., }\n    unless R.recto? and R.verso?\n      unless ( layout = R.layouts[ R.layout.name ] )?\n        throw new Error \"^metteur/types@23^ unknown layout name #{rpr R.layout.name}\"\n      R.layout = { layout..., R.layout..., }\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n# types.declare.mtr_cli_impose_cfg 'mtr_impose_cfg'\n  # $input:       'nonempty.text'\n  # $output:      'nonempty.text'\n  # $overwrite:   'boolean'\n  # $split:       'integer'\n  # default:\n  #   input:      null\n  #   output:     null\n  #   overwrite:  false\n  #   split:      0\n\n"
  ]
}