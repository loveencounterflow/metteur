{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'METTEUR/types'\n{ rpr\n  echo }                  = GUY.trm\nmodule.exports            = types = new ( require 'intertype' ).Intertype()\n{ declare }               = types\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_new_template\n  $template:    'text'\n  $open:        'nonempty.text'\n  $close:       'nonempty.text'\n    ### TAINT would use default `optional.function` but for outstanding bug in `intertype` ###\n  $format:      'function'\n  # extras:       false\n  default:\n    template:     null\n    open:         '{'\n    close:        '}'\n    ### TAINT would use default `null` but for outstanding bug in `intertype` ###\n    # format:       null\n    format:       id = ( value, key ) -> value\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_template_fill\n  isa: ( x ) ->\n    return true\n  default: null\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_orientation ( x ) -> x in [ 'ltr', 'rtl', ]\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_quantity\n  extras:         false\n  fields:\n    value:         'float'\n    unit:          'nonempty.text'\n  default:\n    value:    0\n    unit:     null\n  cast: ( x ) ->\n    return x unless types.isa.nonempty.text x\n    return x unless ( match = x.match /^(?<value>.*?)(?<unit>\\D*)$/ )?\n    { value\n      unit  } = match.groups\n    value     = parseFloat value\n    return x unless types.isa.float value\n    return x unless types.isa.nonempty.text unit\n    return { value, unit, }\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_rectangle\n  extras:         false\n  fields:\n    width:         'mtr_length'\n    height:        'mtr_length'\n  default:\n    width:        { value: 0, unit: 'mm', }\n    height:       { value: 0, unit: 'mm', }\n  # cast: ( width, height ) ->\n  #   return\n  #     width:  { value: width,   unit: 'mm', }\n  #     height: { value: height,  unit: 'mm', }\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_length\n  extras:         false\n  isa:            ( x ) ->\n    return false unless @isa.mtr_quantity x\n    return false unless x.unit is 'mm'\n    return true\n  default:\n    value:        0\n    unit:         'mm'\n  cast: ( x ) -> @registry.mtr_quantity.cast x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_layouts ( x ) ->\n  return false unless @isa.object x\n  for key, value of x\n    return false unless @isa.nonempty.text key\n    return false unless @isa.mtr_layout value\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_layout\n  extras:       false\n  $name:        'nonempty.text'\n  $recto:       'optional.mtr_sheet_side_layout'\n  $verso:       'optional.mtr_sheet_side_layout'\n  $angles:      'optional.list.of.mtr_angle'\n  default:\n    name:         null\n    recto:        null\n    verso:        null\n    angles:       null\n  create: ( x ) ->\n    ### TAINT only works for specific case which should be checked for ###\n    if x.angles?\n      angles = ( ( x.angles[ col_idx ] for page in col ) for col, col_idx in x.recto.pages )\n      for side in [ 'recto', 'verso' ]\n        x[ side ].angles ?= angles\n    delete x.angles\n    return x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_pagenr ( x ) -> ( @isa.integer x ) and ( x >= -1 )\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_angle ( x ) -> x in [ 0, 90, 180, 270, -90, ]\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_sheet_side_layout\n  extras:       false\n  $pages:       'list.of.list.of.mtr_pagenr'\n  $angles:      'optional.list.of.list.of.mtr_angle'\n  default:\n    pages:        null\n    angles:       null\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_split ( x ) ->\n  return false unless @isa.nonempty.text x\n  parts = ( part.trim() for part in x.split ',' )\n  pnrs  = []\n  for part, idx in parts\n    pair = part.split ':'\n    switch pair.length\n      when 1 then [ pnr, count, ] = [ part, '-1', ]\n      when 2 then [ pnr, count, ] = pair\n      when 3 then return false ### TAINT can we give reason for rejection? ###\n    return false if @isa.nan pnr    = parseInt pnr    ### TAINT use @isa.nan when available ###\n    return false if @isa.nan count  = parseInt count  ### TAINT use @isa.nan when available ###\n    # debug '^45-1^', { pnr, count, }\n    count = +Infinity if count < 0\n    pnrs.push { pnr, count, }\n  @data.mtr_split = pnrs\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.mtr_impose_cfg\n  extras:       false\n  $input:       'nonempty.text'\n  $output:      'nonempty.text'\n  $overwrite:   'boolean'\n  $split:       'mtr_split'\n  $orientation: 'mtr_orientation'\n  $sheet:       'mtr_rectangle'\n  $layout:      'mtr_layout'\n  $layouts:     'mtr_layouts'\n  default:\n    input:        null\n    output:       null\n    overwrite:    false\n    split:        '-0'\n    orientation:  'ltr' # or 'rtl' which will invert the orientation of all pages, allowing for CJK, Arabic RTL books\n    sheet:\n      width:      '210mm'\n      height:     '297mm'\n    layout:\n      name:       'pps16'\n    layouts:\n      pps16:\n        name:     'pps16'\n        angles: [\n          +90       # column 1 (left)   ### NOTE where necessary, these   ###\n          -90 ]     # column 2 (right)  ### can be given for each page    ###\n        recto:\n          pages: [\n            [  4, 13, 16,  1, ]     # column 1 (left)\n            [  5, 12,  9,  8, ] ]   # column 2 (right)\n        verso:\n          pages: [\n            [  6, 11, 10,  7, ]     # column 1 (left)\n            [  3, 14, 15,  2, ] ]   # column 2 (right)\n  create: ( cfg ) ->\n    R = { @registry.mtr_impose_cfg.default..., cfg..., }\n    unless R.recto? and R.verso?\n      unless ( layout = R.layouts[ R.layout.name ] )?\n        throw new Error \"^metteur/types@23^ unknown layout name #{rpr R.layout.name}\"\n      R.layout = @create.mtr_layout { layout..., R.layout..., }\n    R.sheet.width   = @cast.mtr_length R.sheet.width  if @isa.text R.sheet.width\n    R.sheet.height  = @cast.mtr_length R.sheet.height if @isa.text R.sheet.height\n    debug '^456456^', R\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n# declare.mtr_cli_impose_cfg 'mtr_impose_cfg'\n  # $input:       'nonempty.text'\n  # $output:      'nonempty.text'\n  # $overwrite:   'boolean'\n  # $split:       'integer'\n  # default:\n  #   input:      null\n  #   output:     null\n  #   overwrite:  false\n  #   split:      0\n\n"
  ]
}